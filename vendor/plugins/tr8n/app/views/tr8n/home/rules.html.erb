<style>
  h2 {
    font-weight: bold;
  }
  h3 {
    padding-top: 10px;
  }
  .snippet {
    border: 1px solid #ccc;
    margin-top:10px;
    margin-bottom:10px;
    padding:10px;
    background-color: #f8f8ff;
  }
  .snippet2 {
    border: 1px solid #ccc;
    margin-top:10px;
    margin-bottom:10px;
    padding:10px;
    background-color: #fff8f8;
  }
  .try_it {
    font-style:italic;
  }
  .toc {
    margin-left:20px;
    margin-bottom:20px;
    list-style-type:upper-roman;
  }
  .toc li div {
    border-bottom:1px dotted #ccc; 
    font-size:16px;
  }
  .toc1 {
    margin-left:20px;
    list-style-type:lower-roman;
  }
</style>
<div style="text-align:center; margin:15px;">
 <%=image_tag("/tr8n/images/tr8n_logo.png", :style => "height:120px;")%>
</div>

<h2 class="underscore content_hd">
  <%=tr("Tr8n Rules Engine Configuration")%>
</h2>

<div class="content_bd">
  <h2><%=tr("Table of Content") %></h2>
  <p>
    <ul class='toc'>
      <li><div><a href="#introduction"><%=tr("Introduction") %></a></div>
      </li>
      <li><div><a href="#context_rules"><%=tr("Language Context Rules") %></a></div>
       <ul class='toc1'>
         <li><div><a href="#numeric_rules"><%=tr("Numeric Rules") %></a></li>
         <li><div><a href="#gender_rules"><%=tr("Gender Rules") %></a></li>
         <li><div><a href="#list_rules"><%=tr("List Rules") %></a></li>
         <li><div><a href="#date_rules"><%=tr("Date Rules") %></a></li>
         <li><div><a href="#value_rules"><%=tr("Value Rules") %></a></li>
       </ul>  
      </li>
      <li><div><a href="#context_rules"><%=tr("Language Case Rules") %></a></div></li>
    </ul>
  </p>

  <a name="introduction">&nbsp;</a>
  <h2><%=tr("Introduction") %></h2>
  <p>
    Tr8n translation engine is a rails engine plugin that provides a framework 
    for crowd-source translations and management of any internationalized text 
    throughout any rails based application. The power of the engine comes from 
    its simple and friendly user interface that allows site users to rapidly 
    translate the site into hundreds of languages. The flexible and robust rules 
    engine that powers Tr8n allows for any combinations of language specific 
    rules in any translatable sentence. Users themselves can provide information 
    on what sentences depend on gender rules, number rules or other types of rules 
    supported by the engine. The language specific rules can be registered and 
    managed for any language in the advanced user interface. 
  </p>
	
	<p>
		There are two types of rules supported by Tr8n: 
	  <div style="padding-left:20px; padding-bottom:10px;">
	    <ul style="list-style-type:square">
	      <li>Language context rules that define the context for translations.</li>
        <li>Language case rules that evaluate and modify token values.</li>
      </ul>
		</div>			
	</p>	
  
  <p>
  	This document provides details on how to configure rules for various languages and shows examples on how those rules are used by the translators.
  </p>  
  
  <a name="context_rules">&nbsp;</a>
  <h2>Language Context Rules</h2>
	<p>
		Language context rules are used to define a context for any translation of the original phrase. The easiest way to understand it is to start with a simple example.
		
    <div class="snippet">     
       tr("You have {count||message}", "Inbox count label", :count => 5) 
    </div>      

    <i>Note: In the above example, we used a transform token to make it easy to evaluate the numeric rule for the base language (which is English in our case). More on it later.<br><br>
    </i>

    In many languages the translated word "messages" depends on the value of the token {count}. 
		In languages, like English, there are only two context rules that are necessary to correctly translate the above phrase:
		<br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>Rule 1: {count} is 1</li>
        <li>Rule 2: {count} is not 1</li>
      </ul>
    </div>      

    When a translator opens the translation window for the above phrase, he/she can indicate that the phrase translations depend on the context rules (based on some tokens) and 
		provide the translation for each of the rule:<br>
    <div class="snippet">     
      "You have 1 message!"<br>
      Context: count is 1<br><br>
      
      "You have 2 messages!"<br>
      Context: count is not 1<br>
    </div>      

    But this is not the case with other language. For instant, many of the Slavic languages, like Russian, has 3 or more rules for number based tokens. 
		
    Lets use the following code and try translating it using Russian language:    
    <div class="snippet">
       &lt;% 0.upto(5) do |i| %><br><br>
       &nbsp;&nbsp;&nbsp;&nbsp; &lt;%= tr("You have {count||message}", "Inbox count label", :count => i) %><br><br>
       &lt;% end %><br>    
    </div>

    <br>
    Now follow the steps below and try translating the following block:

    <div class="snippet2">
    	 <% 0.upto(5) do |i| %>
			   <%= tr("You have {count||message}", "Inbox count label", :count => i) %><br>
			 <% end %>    
    </div>

    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:decimal;">
        <li>Make sure you are a registered user and have logged into the site</li>
        <li>Choose a language other than English</li>
        <li>Press Ctrl+Shift+I to enable the inline translations or choose that options from the language selector.</li>
				<li>Right-mouse-click on any one of the highlighted rows above to open the translator window</li>
				<li>Click on the "generate context rules for this phrase" link:<br><br>
				    <%=image_tag("/tr8n/images/examples/numeric_rules_1.png")%><br><br>
				</li>
				<li>Check the number dependency checkbox in the count token row:<br><br>
		        <%=image_tag("/tr8n/images/examples/numeric_rules_2.png")%><br><br>
				</li>
				<li>Click "Continue..." button to see the translation option for each context rule available for the language:<br><br> 
            <%=image_tag("/tr8n/images/examples/numeric_rules_3.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
				</li>
      </ul>
    </div>         

    Based on the language you chose, you will get a list of pre-generated default translations for each context rule for the given phrase. 
		In the above example, we chose the Russian language, which like some Slavic languages, has three rules for number dependent tokens. 
    <br><br>
    If you followed the instructions above and chose Russian language, you should see the above block looking something like this:<br><br>
    <%=image_tag("/tr8n/images/examples/numeric_rules_4.png", :style => "width:800px;")%><br><br>

    Good job! By this point you pretty much have an idea of how the rules engine works.<br><br>
		
		Lets take a look now at the various rules that Tr8n rules engine comes with.   
	</p>

  <a name="numeric_rules">&nbsp;</a>
  <h3>Numeric Rules</h3>
  <p>
    The example above was using the numeric rules dependency. It showed how the translators deal with the rules when they translate the sentence, 
		but what it didn't show was the following:
		
    <ul style="padding-left:20px; list-style-type:square;">
      <li>Where did Tr8n get the 3 rules defined for Russian language?</li>
      <li>How on Earth did Tr8n know that the {count} token was dependant on numeric rules?</li>
			<li>How does it evaluate the rules at Runtime to get the appropritate translation for the given phrase?</li>
		</ul>		
    <br><br>
		
    Let's start from the beginning. Tr8n engine has three modes: user facing functions, language manager functions and administrative functions. 
		User facing function showed everything that we've done during the translation process in the above example. Language manager function is what we are going to look at right now.
		Admin facing functions is what only site administrators can see. We will look into it later. 
    <br><br>
		
    If you are a language manager for any particular language, then you have access to the following interface of that language:<br><br>
		<%=image_tag("/tr8n/images/examples/language_manager_1.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
				
		There are a few different tools that language managers can use to change each language behavior. In our case, let's concentrate on the Context Rules section.<br><br>
		
    <%=image_tag("/tr8n/images/examples/context_rules_1.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
		 
		If you click on the edit button on the top right corner, you will enter the edit mode of the context rules:<br><br>
    <%=image_tag("/tr8n/images/examples/context_rules_2.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
		 
		In that screen language managers can change rule definitions for each rule type. As it was mentioned earlier, in English language the rules would simply be:
		
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>is 1</li>
        <li>is not 1</li>
      </ul>
    </div>      
  
	  <strong>Number Rule Definition</strong><br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>Number rule can be simple or complex. You can use "more" and "less" links to use the double conditions for any rule line.</li>
        <li>The first operation options are: "is", "is not", "ends in", "does not end in"</li>
				<li>The linking operator options are: "and", "or"</li>
        <li>The last operation options are: "is", "is not", "ends in", "does not end in"</li>
      </ul>
    </div>      

    We have answered the first question of where Tr8n got the rules. Now let's look at how Tr8n knew about the token-rule dependency. <br><br>

    <strong>Number Rule Configuration</strong><br><br>
		
		Tr8n Rules engine itself does not know and really care about what rules it has and what it should do with them. The rules of Tr8n can be extended, modified, added and removed by the developers.
		Take a look at the Rule Engine section in the <strong>config/tr8n/config.yml</strong> file:
		
    <div class="snippet" style="font-size:11px;">
      <pre>
  #############################################################################
  # Rules Engine Settings
  #############################################################################
  rules_engine:  
    <strong>language_rule_classes:    [Tr8n::NumericRule, Tr8n::GenderRule, Tr8n::GenderListRule, Tr8n::DateRule, Tr8n::ValueRule]</strong>
    data_token_classes:       [Tr8n::Tokens::DataToken, Tr8n::Tokens::HiddenToken, Tr8n::Tokens::MethodToken, Tr8n::Tokens::TransformToken]
    decoration_token_classes: [Tr8n::Tokens::DecorationToken]
    allow_nil_token_values:   true
    <strong>numeric_rule:             
      token_suffixes:         [count, num, age, hours, minutes, years, seconds]
      object_method:          to_i
    </strong>gender_rule:  
      token_suffixes:         [user, profile, actor, target, partner, parent, child, sibling, manager]
      object_method:          gender
      method_values:  
        female:               female
        male:                 male
        neutral:              neutral
        unknown:              unknown
    gender_list_rule:                 
      object_method:          size
      token_suffixes:         [list]
    date_rule:                
      token_suffixes:         [date]
      object_method:          to_date
    value_rule:               
      token_suffixes:         *
      object_method:          to_s
      </pre>
		</div>			 
		
		The most important parts of the file that are applicable to the Number Rule are in bold. When Tr8n boots up for the first time, it looks at the list of rule classes under the
		language_rule_classes key and loads the classes it needs. Each Rule class extends the basic Tr8n::LanguageRule class, which provides the basic rule behavior. 
		The rule configuration options and UI are provided by the rules themselves. So it is fairly easy to add a new rule to the engine. 
		<br><br>
		
		Since Tr8n comes with the 6 default rules, I have added sections in the rules_engine config section where these rules can be configured. Each rule may need some ability to be customized for 
		the site where Tr8n will be used.
		<br><br>
		 
		<strong>Number Rule</strong> is implemented by the <strong>Tr8n::NumericRule</strong> class and uses the <strong>numeric_rule</strong> section of the rules_engine configuration. 
		<br><br> 
		
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates the set of token names that have numerical values and can be translated using numeric context rule</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its numerical value</li>
      </ul>
    </div>      				 
			
		This means that any of the following tokens will give user an option to translate the phrase based on the numeric value of the token: {count}, {num}, {message_num}, {user_count}, etc...
    
		Notice that in our above example we used a simple number for the token value. It worked great because, in Ruby, the numbers are objects that respond to to_i method as well:
				
    <div class="snippet">     
       tr("You have {count||message}", "Inbox count label", :count => 5) 
    </div>      
		
		But the value of the {count} could have been a string or any other object, as long as it implemented the to_i method. If your site has other conventions, you can easily change the
		numeric_rule definition and everything would still work.
				 
  </p>

  <a name="gender_rules">&nbsp;</a>
  <h3>Gender Rules</h3>
  <p>
  	Consider the following example:
		
    <div class="snippet">
      tr("Dear {user},", "Reference to a user in a heading of an email", :user => [current_user, :name])<br><br>
      tr("{user} updated {user| his, her} profile.", "Newsfeed story heading", :user => [some_user, :name])<br><br>
      tr("{user| Added On:}", "Label for when the user was added to the site", :user => some_user)<br><br>
    </div>
		
		All of the above examples have dependency on the gender of the {user} token. Each sentence will have 2 or 3 translations based on the rule definition of the language the phrase is translated to.
    
		<br><br>		
    Change your language, enable inline translations and try translating the following sentences yourself:
    <div class="snippet2">     
      <%= tr("Dear {user},", "Reference to a user in a heading of an email", :user => [Tr8n::Config.current_user, :name]) %>
      <br><br>
      <%= tr("{user} updated {user| his, her} profile.", "Newsfeed story heading", :user => [Tr8n::Config.current_user, :name]) %>
      <br><br>
      <%= tr("{user| Added On:}", "Label for when the user was added to the site", :user => Tr8n::Config.current_user) %>
    </div>      
		
		
    Let's take the second example and look at what it would be translated to in Russian: 
    <br><br>
    <%=image_tag("/tr8n/images/examples/gender_rules_1.png", :style =>"vertical-align:top; padding-right:15px;")%>
    <%=image_tag("/tr8n/images/examples/gender_rules_2.png", :style =>"vertical-align:top")%><br><br>

    Translating the above sentece into Russian will require setting up a dependency on the {user} token. Russian language was configured to have 3 rules to hande male, female and unknown gender cases.<br><br>
    <%=image_tag("/tr8n/images/examples/gender_rules_3.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
		
		Some languages can treat unknown genders as male genders. The gender rules for that language can simply state:
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>user is a female</li>
        <li>user is not a female</li>
      </ul>
    </div>               
             
    <br>
    <strong>Gender Rule Definition</strong><br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>A rule consists of 2 parts: operator and gender.</li>
        <li>The operator options are: "is", "is not"</li>
        <li>The gender options are: "a male", "a female", "neutral", "unknown"</li>
      </ul>
    </div>      
    
    <br>
    <strong>Gender Rule Configuration</strong><br>    
    <div class="snippet" style="font-size:11px;">
      <pre>
rules_engine:
  ...  
  <strong>gender_rule:  
    token_suffixes:         [user, profile, actor, target, partner, parent, child, sibling, manager]
    object_method:          gender
    method_values:  
      female:               female
      male:                 male
      neutral:              neutral
      unknown:              unknown</strong>
   ...  
      </pre>
    </div>
              
    <strong>Gender Rule</strong> is implemented by the <strong>Tr8n::GenderRule</strong> class and uses the <strong>gender_rule</strong> section of the rules_engine configuration. 
    <br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates the set of token names that can be translated using gender context rule</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its gender value</li>
        <li><strong>method_values</strong> maps the return values from the object_method that would tell the rule if it met the evaluation criteria</li>
      </ul>
    </div>  		
  </p>

  <a name="list_rules">&nbsp;</a>
  <h3>List Rules</h3>
  <p>
    Consider the following examples:

    <div class="snippet">
      user1 = User.new(:name => "Michael", :gender => 'male')<br>
      user2 = User.new(:name => "Amos", :gender => 'male')<br>
      user3 = User.new(:name => "Tina", :gender => 'female')<br>
      users = [user1, user2, user3]<br><br>
      
      tr("{user_list} updated {user_list| his profile, her profile, their profiles}.", "Newsfeed story title", :user_list => [users, :name])<br><br>
      tr("{user_list} updated {user_list| his profile, her profile, their profiles}.", "Newsfeed story title", :user_list => [[user1], :name])<br><br>
      tr("{user_list|| likes, like} this post.", "Newsfeed story title", :user_list => [users, :name])<br><br>
      tr("{user_list|| likes, like} this post.", "Newsfeed story title", :user_list => [[user1], :name])<br><br>
    </div>
    
    <br>
    Change your language, enable inline translations and try translating the following sentences yourself:
    <div class="snippet2">
    	<%
	      user1 = Tr8n::Translator.new(:name => "Michael", :gender => 'male')
	      user2 = Tr8n::Translator.new(:name => "Amos", :gender => 'male')
	      user3 = Tr8n::Translator.new(:name => "Tina", :gender => 'female')
	      users = [user1, user2, user3]
      %>     
      <%= tr("{user_list} updated {user_list| his profile, her profile, their profiles}.", "Newsfeed story title", :user_list => [users, :name]) %><br><br>
      <%= tr("{user_list} updated {user_list| his profile, her profile, their profiles}.", "Newsfeed story title", :user_list => [[user1], :name]) %><br><br>
			
      <%= tr("{user_list|| likes, like} this post.", "Newsfeed story title", :user_list => [users, :name]) %><br><br>
      <%= tr("{user_list|| likes, like} this post.", "Newsfeed story title", :user_list => [[user1], :name]) %><br><br>
    </div>      
    
		<br>
		As you can tell, there is something interesting going on here. Overall, there is nothing new. We are just using the transform tokens. The above examples only registered two 
		phrases in the system. But they are very powerful. List tokens have special notations and we are going to look at them in a little bit.
    
    Let's take the first example and look at what it would be translated to in Russian: 
    <br><br>
    <%=image_tag("/tr8n/images/examples/list_rules_1.png", :style =>"vertical-align:top; padding-right:15px;")%>
    <%=image_tag("/tr8n/images/examples/list_rules_2.png", :style =>"vertical-align:top")%><br><br>

    Translating the above sentece into Russian will require setting up a dependency on the {user_list} token. 
		Russian language was configured to have 4 rules to hande male, female, unknown gender cases for a single element in the list and one rule for plural case.<br><br>
    <%=image_tag("/tr8n/images/examples/list_rules_3.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
    
    Some languages, like Hebrew, can specify the genders for the plural cases as well:
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>user_list contains at least 2 elements that are all male</li>
        <li>user_list contains at least 2 elements that are all female</li>
				<li>user_list contains at least 2 elements that are of mixed gender</li>
      </ul>
    </div>               
             
    <br>
    <strong>List Rule Definition</strong><br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>List rule can be simple or complex. You can use "more" and "less" links to use the double conditions for any rule line.</li>
        <li>First operator options: "contains"</li>
        <li>First operator values: "one element", "at least 2 elements"</li>
        <li>Second operator options: "that is", "that is not", "that are", "that are not"</li>
        <li>Second operator values: "male", "female", "unknown", "neutral", "all male", "all female", "of mixed gender"</li>
      </ul>
    </div>      
    
    <br>
    <strong>List Rule Configuration</strong><br>    
    <div class="snippet" style="font-size:11px;">
      <pre>
rules_engine:
  ...  
  <strong>gender_list_rule:                 
      object_method:          size
      token_suffixes:         [list]</strong>
   ...  
      </pre>
    </div>
              
    <strong>List Rule</strong> is implemented by the <strong>Tr8n::GenderListRule</strong> class and uses the <strong>gender_list_rule</strong> section of the rules_engine configuration.
		It is important to note that the list rule works together with the gender rule to use the gender method configurations. 
    <br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates the set of token names that can be translated using gender context rule</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its gender value</li>
      </ul>
    </div>
		
		
    <br>
    <strong>List View Options</strong><br><br>    
		
		When a token contains a collection of values instead of a single value (wether it needs to be rule dependent or not) it has some nice extra features in terms of how it can be 
		presented to the user.
    <div class="snippet" style="font-size:11px;">
      <pre>
  ##############################################################################
  #
  # tr("Hello {user_list}!", "Example fragment", {:user_list => [[user1, user2, user3], :name]}}
  #
  # first element is an array, the rest of the elements are similar to the 
  # regular tokens lambda, symbol, string, with parameters that follow
  #
  # if you want to pass options, then make the second parameter an array as well
  #    
  # tr("{user_list} joined Geni", "", 
  #       {:user_list => [[user1, user2, user3], 
  #                         [:name],      # this can be any of the value methods
  #                         { :expandable => true, 
  #                           :to_sentence => true, 
  #                           :limit => 4, 
  #                           :separator => ',',
  #                           :translate_items => false,
  #                           :minimizable => true
  #                         }
  #                       ]
  #                      ]})
  #
  ##############################################################################		
      </pre>
	</div>
	
		As you can see from the definition above, if you make the second parameter of the tr function an array as well, you can provide a third parameter 
		that would indicate how to display the array values. Let's try the following example:
		
	  <div class="snippet">
	  	users = 1.upto(10).collect{|i| User.new(:name => "User #{i}", :gender => 'male')}<br><br>
	  	tr("{users} joined the site!", "Newsfeed story header", :users => [users, :name])
	  </div> 	
	
    <br>
    The above example uses the second parameter as method symbol, which indicates that default display params will be used, resulting in:
    <div class="snippet2">     
      <% users = 1.upto(10).collect{|i| Tr8n::Translator.new(:name => "User #{i}", :gender => 'male')} %>
      <%= tr("{users} joined the site!", "Newsfeed story header", :users => [users, :name]) %>
    </div>      
		 
		 Notice that the expandable flag was set to true, limit was set to 4, etc... resulting in display of 4 names with an expandable link to display the rest of the names

     Lets try changing the parameters to display limit 3 and try again:
    
    <div class="snippet">
      users = 11.upto(15).collect{|i| User.new(:name => "User #{i}", :gender => 'male')}<br><br>
      tr("{users} joined the site!", "Newsfeed story header", :users => [users, [:name], {:limit => 3}])
    </div>  

    <div class="snippet2">     
      <% users = 11.upto(15).collect{|i| Tr8n::Translator.new(:name => "User #{i}", :gender => 'male')} %>
      <%= tr("{users} joined the site!", "Newsfeed story header", :users => [users, [:name], {:limit => 3}]) %>
    </div>      
		      
		Notice that the above two examples use the same translation key. You got the idea! You can try changinging other parameters and see what happens.			
  </p>


  <a name="date_rules">&nbsp;</a>
  <h3>Date Rules</h3>
  <p>
    Date Rule is a very simple rule. It is used to evaluate the default as well as the translated phrases using the date object. For instance:
    
    <div class="snippet">     
       tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", "Birthday notification", :user => current_user, :birth_date => Date.today) 
    </div>      
    
    This looks a little cryptic at first because it actually compresses three sentences and a bunch of translations into a simple phrase. Let's take a closer look:
    
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates the set of token names that have numerical values and can be translated using numeric context rule</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its numerical value</li>
      </ul>
    </div>               

    Let's try the following variations:
		
    <div class="snippet">     
       tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", 
			"Birthday notification", :user => current_user, :birth_date => [Date.today - 1.day, :strftime, "%D"]) <br><br>
			
       tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", 
      "Birthday notification", :user => current_user, :birth_date => [Date.today, :strftime, "%D"]) <br><br>
			
       tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", 
      "Birthday notification", :user => current_user, :birth_date => [Date.today + 1.day, :strftime, "%D"]) <br><br>
    </div>      
          
		Change your language, enable inline translations and try translating the following sentence:
    <div class="snippet2">     
      <%= tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", "Birthday notification", :user => Tr8n::Config.current_user, :birth_date => [Date.today - 1.day, :strftime, "%D"]) %>
			<br><br>
      <%= tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", "Birthday notification", :user => Tr8n::Config.current_user, :birth_date => [Date.today, :strftime, "%D"]) %>
      <br><br>
      <%= tr("{user} {birth_date| celebrated, celebrates, will celebrate} {user|his,her} birthday on {birth_date}!", "Birthday notification", :user => Tr8n::Config.current_user, :birth_date => [Date.today + 1.day, :strftime, "%D"]) %>
    </div>      

    All those variations have only created a single translation key in the default language. But transling them into other languages is a whole different story.
		<br><br>
    <%=image_tag("/tr8n/images/examples/date_rules_1.png", :style =>"vertical-align:top; padding-right:15px;")%>
    <%=image_tag("/tr8n/images/examples/date_rules_2.png", :style =>"vertical-align:top")%><br><br>

    Translating the above sentece into Russian will require setting up a dependency on the {user} token, as well as {date} token. Both of the tokens have 3 rules 
    and will result in the total of 9 translations.<br><br>
    <%=image_tag("/tr8n/images/examples/date_rules_3.png", :style => "width:800px; border:1px solid #ccc;")%><br><br>
		
    <br>
    <strong>Date Rule Definition</strong><br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>A rule consists of 2 parts: operator and timeframe.</li>
        <li>The operator options are: "is in the", "is not in the"</li>
        <li>The timeframe options are: "past", "present", "future"</li>
      </ul>
    </div>      

    <br>
    <strong>Date Rule Configuration</strong><br><br>    
    <div class="snippet" style="font-size:11px;">
      <pre>
rules_engine:
  ...  
  <strong>date_rule:                
      token_suffixes:         [date]
      object_method:          to_date
  </strong>
  ...  
      </pre>
    </div>
    
    <br>
    <strong>Date Rule</strong> is implemented by the <strong>Tr8n::DateRule</strong> class and uses the <strong>date_rule</strong> section of the rules_engine configuration. 
    <br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates the set of token names that have date values and can be translated using date context rule</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its date value</li>
      </ul>
    </div>
                   
  </p>  

  <a name="value_rules">&nbsp;</a>
  <h3>Value Rules</h3>
  <p>
    Value rules are used for contextual translations of phrases where other parts of the phrase depends on the value of the token. Those rules are usually used in 
		combintation with the Language Case Rules, which will be described in the later sections.
		
    <br><br>
    <strong>Value Rule Definition</strong><br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li>A rule consists of 2 parts: operator and value.</li>
        <li>The operator options are: "is", "is not", "starts with", "does not start with", "ends in", "does not end in"</li>
        <li>The value can be anything provided by the language manager</li>
      </ul>
    </div>      

    <br>
    <strong>Value Rule Configuration</strong><br><br>    
    <div class="snippet" style="font-size:11px;">
      <pre>
rules_engine:
  ...  
  <strong>value_rule:                
      token_suffixes:         *
      object_method:          to_s
  </strong>
  ...  
      </pre>
    </div>
    
    <br>
    <strong>Value Rule</strong> is implemented by the <strong>Tr8n::ValueRule</strong> class and uses the <strong>value_rule</strong> section of the rules_engine configuration. 
    <br><br>
    <div style="padding-left:20px; padding-bottom:10px;">
      <ul style="list-style-type:square">
        <li><strong>token_suffixes</strong> indicates that it can be applied to any token</li>
        <li><strong>object_method</strong> indicates the method that must be applied on the token object in order to get its date value</li>
      </ul>
    </div>
		
  </p>

  <a name="language_cases">&nbsp;</a>
  <h2>Language Case Rules</h2>
  <p>
  	A language case is an inflection or use of a noun (or pronoun) to show its relation to other words in the sentence. In some languages, like Russian, the form of a token {actor} will changed based on where and how the token is used in a sentence. For instance, in '{target} received a gift from {actor}', {actor} token will be in the genitive form of the language. 
		
		<br><br>
    Work in progress, please be patient...
  </p>
	
</div>